
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/running_courses/EE671/EE671_40/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/laplacian/src/laplacian.v
Parsing SystemVerilog input from `/openlane/designs/laplacian/src/laplacian.v' to AST representation.
Storing AST representation for module `$abstract\mux_21_8'.
Storing AST representation for module `$abstract\mux_21_11'.
Storing AST representation for module `$abstract\or_1'.
Storing AST representation for module `$abstract\pg_gen'.
Storing AST representation for module `$abstract\carry_gen'.
Storing AST representation for module `$abstract\sum_gen'.
Storing AST representation for module `$abstract\ks11'.
Storing AST representation for module `$abstract\comp2'.
Storing AST representation for module `$abstract\laplacian'.
Storing AST representation for module `$abstract\mat_operation'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\laplacian'.
Generating RTLIL representation for module `\laplacian'.
Warning: Replacing memory \third_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:490
Warning: Replacing memory \second_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:489
Warning: Replacing memory \first_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:488

4.1. Analyzing design hierarchy..
Top module:  \laplacian

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\mat_operation'.
Generating RTLIL representation for module `\mat_operation'.
Reprocessing module laplacian because instantiated module mat_operation has become available.
Generating RTLIL representation for module `\laplacian'.
Warning: Replacing memory \third_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:490
Warning: Replacing memory \second_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:489
Warning: Replacing memory \first_row with list of registers. See /openlane/designs/laplacian/src/laplacian.v:488

4.3. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\mux_21_8'.
Generating RTLIL representation for module `\mux_21_8'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\or_1'.
Generating RTLIL representation for module `\or_1'.

4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\mux_21_11'.
Generating RTLIL representation for module `\mux_21_11'.

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\comp2'.
Generating RTLIL representation for module `\comp2'.

4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\ks11'.
Generating RTLIL representation for module `\ks11'.

4.9. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation
Used module:         \mux_21_8
Used module:         \or_1
Used module:         \mux_21_11
Used module:         \comp2
Used module:             \ks11

4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\sum_gen'.
Generating RTLIL representation for module `\sum_gen'.

4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\carry_gen'.
Generating RTLIL representation for module `\carry_gen'.

4.12. Executing AST frontend in derive mode using pre-parsed AST for module `\pg_gen'.
Generating RTLIL representation for module `\pg_gen'.

4.13. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation
Used module:         \mux_21_8
Used module:         \or_1
Used module:         \mux_21_11
Used module:         \comp2
Used module:             \ks11
Used module:                 \sum_gen
Used module:                 \carry_gen
Used module:                 \pg_gen

4.14. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation
Used module:         \mux_21_8
Used module:         \or_1
Used module:         \mux_21_11
Used module:         \comp2
Used module:             \ks11
Used module:                 \sum_gen
Used module:                 \carry_gen
Used module:                 \pg_gen
Removing unused module `$abstract\mat_operation'.
Removing unused module `$abstract\laplacian'.
Removing unused module `$abstract\comp2'.
Removing unused module `$abstract\ks11'.
Removing unused module `$abstract\sum_gen'.
Removing unused module `$abstract\carry_gen'.
Removing unused module `$abstract\pg_gen'.
Removing unused module `$abstract\or_1'.
Removing unused module `$abstract\mux_21_11'.
Removing unused module `$abstract\mux_21_8'.
Removed 10 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/laplacian/runs/full_guide/tmp/synthesis/hierarchy.dot'.
Dumping module laplacian to page 1.
Renaming module laplacian to laplacian.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation
Used module:         \mux_21_8
Used module:         \or_1
Used module:         \mux_21_11
Used module:         \comp2
Used module:             \ks11
Used module:                 \sum_gen
Used module:                 \carry_gen
Used module:                 \pg_gen

7.2. Analyzing design hierarchy..
Top module:  \laplacian
Used module:     \mat_operation
Used module:         \mux_21_8
Used module:         \or_1
Used module:         \mux_21_11
Used module:         \comp2
Used module:             \ks11
Used module:                 \sum_gen
Used module:                 \carry_gen
Used module:                 \pg_gen
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:0$154 in module laplacian.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:0$151 in module laplacian.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:0$147 in module laplacian.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:0$143 in module laplacian.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:0$139 in module laplacian.
Marked 6 switch rules as full_case in process $proc$/openlane/designs/laplacian/src/laplacian.v:485$91 in module laplacian.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 13 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$154'.
     1/1: $1$mem2reg_rd$\third_row$/openlane/designs/laplacian/src/laplacian.v:541$90_DATA[7:0]$156
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$151'.
     1/1: $1$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:540$89_DATA[7:0]$153
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$147'.
     1/1: $1$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:539$88_DATA[7:0]$149
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$143'.
     1/1: $1$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:538$87_DATA[7:0]$145
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$139'.
     1/1: $1$mem2reg_rd$\first_row$/openlane/designs/laplacian/src/laplacian.v:537$86_DATA[7:0]$141
Creating decoders for process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
     1/87: $5$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR[4:0]$131
     2/87: $5$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA[7:0]$132
     3/87: $4$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_ADDR[4:0]$124
     4/87: $4$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_DATA[7:0]$125
     5/87: $4$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA[7:0]$127
     6/87: $4$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR[4:0]$126
     7/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_ADDR[4:0]$116
     8/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_DATA[7:0]$117
     9/87: $3\j[31:0]
    10/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA[7:0]$121
    11/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR[4:0]$120
    12/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_DATA[7:0]$119
    13/87: $3$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_ADDR[4:0]$118
    14/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA[7:0]$109
    15/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR[4:0]$108
    16/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_DATA[7:0]$107
    17/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_ADDR[4:0]$106
    18/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_DATA[7:0]$105
    19/87: $2$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_ADDR[4:0]$104
    20/87: $2\j[31:0]
    21/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA[7:0]$103
    22/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR[4:0]$102
    23/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_DATA[7:0]$101
    24/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_ADDR[4:0]$100
    25/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_DATA[7:0]$99
    26/87: $1$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_ADDR[4:0]$98
    27/87: $1\j[31:0]
    28/87: $1\i[31:0]
    29/87: $0\third_row[17][7:0]
    30/87: $0\third_row[16][7:0]
    31/87: $0\third_row[15][7:0]
    32/87: $0\third_row[14][7:0]
    33/87: $0\third_row[13][7:0]
    34/87: $0\third_row[12][7:0]
    35/87: $0\third_row[11][7:0]
    36/87: $0\third_row[10][7:0]
    37/87: $0\third_row[9][7:0]
    38/87: $0\third_row[8][7:0]
    39/87: $0\third_row[7][7:0]
    40/87: $0\third_row[6][7:0]
    41/87: $0\third_row[5][7:0]
    42/87: $0\third_row[4][7:0]
    43/87: $0\third_row[3][7:0]
    44/87: $0\third_row[2][7:0]
    45/87: $0\third_row[1][7:0]
    46/87: $0\third_row[0][7:0]
    47/87: $0\second_row[17][7:0]
    48/87: $0\second_row[16][7:0]
    49/87: $0\second_row[15][7:0]
    50/87: $0\second_row[14][7:0]
    51/87: $0\second_row[13][7:0]
    52/87: $0\second_row[12][7:0]
    53/87: $0\second_row[11][7:0]
    54/87: $0\second_row[10][7:0]
    55/87: $0\second_row[9][7:0]
    56/87: $0\second_row[8][7:0]
    57/87: $0\second_row[7][7:0]
    58/87: $0\second_row[6][7:0]
    59/87: $0\second_row[5][7:0]
    60/87: $0\second_row[4][7:0]
    61/87: $0\second_row[3][7:0]
    62/87: $0\second_row[2][7:0]
    63/87: $0\second_row[1][7:0]
    64/87: $0\second_row[0][7:0]
    65/87: $0\first_row[17][7:0]
    66/87: $0\first_row[16][7:0]
    67/87: $0\first_row[15][7:0]
    68/87: $0\first_row[14][7:0]
    69/87: $0\first_row[13][7:0]
    70/87: $0\first_row[12][7:0]
    71/87: $0\first_row[11][7:0]
    72/87: $0\first_row[10][7:0]
    73/87: $0\first_row[9][7:0]
    74/87: $0\first_row[8][7:0]
    75/87: $0\first_row[7][7:0]
    76/87: $0\first_row[6][7:0]
    77/87: $0\first_row[5][7:0]
    78/87: $0\first_row[4][7:0]
    79/87: $0\first_row[3][7:0]
    80/87: $0\first_row[2][7:0]
    81/87: $0\first_row[1][7:0]
    82/87: $0\first_row[0][7:0]
    83/87: $0\k[31:0]
    84/87: $0\valid_counter[31:0]
    85/87: $0\col_operation[31:0]
    86/87: $0\col_input[31:0]
    87/87: $0\valid_out[0:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\laplacian.$mem2reg_rd$\third_row$/openlane/designs/laplacian/src/laplacian.v:541$90_DATA' from process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$154'.
No latch inferred for signal `\laplacian.$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:540$89_DATA' from process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$151'.
No latch inferred for signal `\laplacian.$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:539$88_DATA' from process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$147'.
No latch inferred for signal `\laplacian.$mem2reg_rd$\second_row$/openlane/designs/laplacian/src/laplacian.v:538$87_DATA' from process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$143'.
No latch inferred for signal `\laplacian.$mem2reg_rd$\first_row$/openlane/designs/laplacian/src/laplacian.v:537$86_DATA' from process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$139'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\laplacian.\valid_out' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $dff cell `$procdff$1463' with positive edge clock.
Creating register for signal `\laplacian.\col_input' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1464' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\col_operation' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1465' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\i' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1466' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\j' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `\laplacian.\valid_counter' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1470' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\k' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1471' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[0]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1472' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[1]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1473' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[2]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1474' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[3]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1475' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[4]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1476' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[5]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1477' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[6]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1478' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[7]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1479' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[8]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1480' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[9]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1481' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[10]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1482' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[11]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1483' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[12]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1484' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[13]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1485' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[14]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1486' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[15]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1487' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[16]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1488' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\first_row[17]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1489' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[0]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1490' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[1]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1491' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[2]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1492' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[3]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1493' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[4]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1494' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[5]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1495' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[6]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1496' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[7]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1497' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[8]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1498' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[9]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1499' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[10]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1500' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[11]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1501' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[12]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1502' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[13]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1503' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[14]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1504' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[15]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1505' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[16]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1506' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\second_row[17]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1507' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[0]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1508' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[1]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1509' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[2]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1510' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[3]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1511' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[4]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1512' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[5]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1513' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[6]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1514' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[7]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1515' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[8]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1516' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[9]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1517' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[10]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1518' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[11]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1519' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[12]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1520' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[13]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1521' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[14]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1522' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[15]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1523' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[16]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1524' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.\third_row[17]' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1525' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_ADDR' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1526' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:509$83_DATA' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1527' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_ADDR' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1528' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:513$84_DATA' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1529' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_ADDR' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1530' with positive edge clock and positive level reset.
Creating register for signal `\laplacian.$mem2reg_wr$\first_row$/openlane/designs/laplacian/src/laplacian.v:517$85_DATA' using process `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
  created $adff cell `$procdff$1531' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$154'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$154'.
Found and cleaned up 1 empty switch in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$151'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$151'.
Found and cleaned up 1 empty switch in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$147'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$147'.
Found and cleaned up 1 empty switch in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$143'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$143'.
Found and cleaned up 1 empty switch in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$139'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:0$139'.
Found and cleaned up 10 empty switches in `\laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
Removing empty process `laplacian.$proc$/openlane/designs/laplacian/src/laplacian.v:485$91'.
Cleaned up 15 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module laplacian...
Checking module carry_gen...
Checking module sum_gen...
Checking module ks11...
Checking module comp2...
Checking module mux_21_11...
Checking module or_1...
Checking module mux_21_8...
Checking module pg_gen...
Checking module mat_operation...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~8 debug messages>
Optimizing module carry_gen.
Optimizing module sum_gen.
Optimizing module ks11.
Optimizing module comp2.
Optimizing module mux_21_11.
Optimizing module or_1.
Optimizing module mux_21_8.
Optimizing module pg_gen.
Optimizing module mat_operation.

21. Executing FLATTEN pass (flatten design).
Deleting now unused module carry_gen.
Deleting now unused module sum_gen.
Deleting now unused module ks11.
Deleting now unused module comp2.
Deleting now unused module mux_21_11.
Deleting now unused module or_1.
Deleting now unused module mux_21_8.
Deleting now unused module pg_gen.
Deleting now unused module mat_operation.
<suppressed ~62 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~402 debug messages>

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 120 unused cells and 1189 unused wires.
<suppressed ~160 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~231 debug messages>
Removed a total of 77 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 306 unused wires.
<suppressed ~192 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~82 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~82 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1525 ($adff) from module laplacian (D = \second_row[17], Q = \third_row[17]).
Adding EN signal on $procdff$1524 ($adff) from module laplacian (D = \second_row[16], Q = \third_row[16]).
Adding EN signal on $procdff$1523 ($adff) from module laplacian (D = \second_row[15], Q = \third_row[15]).
Adding EN signal on $procdff$1522 ($adff) from module laplacian (D = \second_row[14], Q = \third_row[14]).
Adding EN signal on $procdff$1521 ($adff) from module laplacian (D = \second_row[13], Q = \third_row[13]).
Adding EN signal on $procdff$1520 ($adff) from module laplacian (D = \second_row[12], Q = \third_row[12]).
Adding EN signal on $procdff$1519 ($adff) from module laplacian (D = \second_row[11], Q = \third_row[11]).
Adding EN signal on $procdff$1518 ($adff) from module laplacian (D = \second_row[10], Q = \third_row[10]).
Adding EN signal on $procdff$1517 ($adff) from module laplacian (D = \second_row[9], Q = \third_row[9]).
Adding EN signal on $procdff$1516 ($adff) from module laplacian (D = \second_row[8], Q = \third_row[8]).
Adding EN signal on $procdff$1515 ($adff) from module laplacian (D = \second_row[7], Q = \third_row[7]).
Adding EN signal on $procdff$1514 ($adff) from module laplacian (D = \second_row[6], Q = \third_row[6]).
Adding EN signal on $procdff$1513 ($adff) from module laplacian (D = \second_row[5], Q = \third_row[5]).
Adding EN signal on $procdff$1512 ($adff) from module laplacian (D = \second_row[4], Q = \third_row[4]).
Adding EN signal on $procdff$1511 ($adff) from module laplacian (D = \second_row[3], Q = \third_row[3]).
Adding EN signal on $procdff$1510 ($adff) from module laplacian (D = \second_row[2], Q = \third_row[2]).
Adding EN signal on $procdff$1509 ($adff) from module laplacian (D = \second_row[1], Q = \third_row[1]).
Adding EN signal on $procdff$1508 ($adff) from module laplacian (D = \second_row[0], Q = \third_row[0]).
Adding EN signal on $procdff$1507 ($adff) from module laplacian (D = \first_row[17], Q = \second_row[17]).
Adding EN signal on $procdff$1506 ($adff) from module laplacian (D = \first_row[16], Q = \second_row[16]).
Adding EN signal on $procdff$1505 ($adff) from module laplacian (D = \first_row[15], Q = \second_row[15]).
Adding EN signal on $procdff$1504 ($adff) from module laplacian (D = \first_row[14], Q = \second_row[14]).
Adding EN signal on $procdff$1503 ($adff) from module laplacian (D = \first_row[13], Q = \second_row[13]).
Adding EN signal on $procdff$1502 ($adff) from module laplacian (D = \first_row[12], Q = \second_row[12]).
Adding EN signal on $procdff$1501 ($adff) from module laplacian (D = \first_row[11], Q = \second_row[11]).
Adding EN signal on $procdff$1500 ($adff) from module laplacian (D = \first_row[10], Q = \second_row[10]).
Adding EN signal on $procdff$1499 ($adff) from module laplacian (D = \first_row[9], Q = \second_row[9]).
Adding EN signal on $procdff$1498 ($adff) from module laplacian (D = \first_row[8], Q = \second_row[8]).
Adding EN signal on $procdff$1497 ($adff) from module laplacian (D = \first_row[7], Q = \second_row[7]).
Adding EN signal on $procdff$1496 ($adff) from module laplacian (D = \first_row[6], Q = \second_row[6]).
Adding EN signal on $procdff$1495 ($adff) from module laplacian (D = \first_row[5], Q = \second_row[5]).
Adding EN signal on $procdff$1494 ($adff) from module laplacian (D = \first_row[4], Q = \second_row[4]).
Adding EN signal on $procdff$1493 ($adff) from module laplacian (D = \first_row[3], Q = \second_row[3]).
Adding EN signal on $procdff$1492 ($adff) from module laplacian (D = \first_row[2], Q = \second_row[2]).
Adding EN signal on $procdff$1491 ($adff) from module laplacian (D = \first_row[1], Q = \second_row[1]).
Adding EN signal on $procdff$1490 ($adff) from module laplacian (D = \first_row[0], Q = \second_row[0]).
Adding EN signal on $procdff$1489 ($adff) from module laplacian (D = $procmux$649_Y, Q = \first_row[17]).
Adding EN signal on $procdff$1488 ($adff) from module laplacian (D = $procmux$670_Y, Q = \first_row[16]).
Adding EN signal on $procdff$1487 ($adff) from module laplacian (D = $procmux$694_Y, Q = \first_row[15]).
Adding EN signal on $procdff$1486 ($adff) from module laplacian (D = $procmux$721_Y, Q = \first_row[14]).
Adding EN signal on $procdff$1485 ($adff) from module laplacian (D = $procmux$751_Y, Q = \first_row[13]).
Adding EN signal on $procdff$1484 ($adff) from module laplacian (D = $procmux$784_Y, Q = \first_row[12]).
Adding EN signal on $procdff$1483 ($adff) from module laplacian (D = $procmux$820_Y, Q = \first_row[11]).
Adding EN signal on $procdff$1482 ($adff) from module laplacian (D = $procmux$859_Y, Q = \first_row[10]).
Adding EN signal on $procdff$1481 ($adff) from module laplacian (D = $procmux$901_Y, Q = \first_row[9]).
Adding EN signal on $procdff$1480 ($adff) from module laplacian (D = $procmux$946_Y, Q = \first_row[8]).
Adding EN signal on $procdff$1479 ($adff) from module laplacian (D = $procmux$994_Y, Q = \first_row[7]).
Adding EN signal on $procdff$1478 ($adff) from module laplacian (D = $procmux$1045_Y, Q = \first_row[6]).
Adding EN signal on $procdff$1477 ($adff) from module laplacian (D = $procmux$1099_Y, Q = \first_row[5]).
Adding EN signal on $procdff$1476 ($adff) from module laplacian (D = $procmux$1156_Y, Q = \first_row[4]).
Adding EN signal on $procdff$1475 ($adff) from module laplacian (D = $procmux$1216_Y, Q = \first_row[3]).
Adding EN signal on $procdff$1474 ($adff) from module laplacian (D = $procmux$1279_Y, Q = \first_row[2]).
Adding EN signal on $procdff$1473 ($adff) from module laplacian (D = $procmux$1345_Y, Q = \first_row[1]).
Adding EN signal on $procdff$1472 ($adff) from module laplacian (D = $procmux$1414_Y, Q = \first_row[0]).
Adding EN signal on $procdff$1471 ($adff) from module laplacian (D = $0\k[31:0], Q = \k).
Adding EN signal on $procdff$1470 ($adff) from module laplacian (D = $add$/openlane/designs/laplacian/src/laplacian.v:497$110_Y, Q = \valid_counter).
Adding EN signal on $procdff$1465 ($adff) from module laplacian (D = $procmux$1437_Y, Q = \col_operation).
Adding EN signal on $procdff$1464 ($adff) from module laplacian (D = $procmux$1449_Y, Q = \col_input).
Adding EN signal on $procdff$1463 ($dff) from module laplacian (D = $0\valid_out[0:0], Q = \valid_out).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 94 unused cells and 94 unused wires.
<suppressed ~95 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~22 debug messages>

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~222 debug messages>
Removed a total of 74 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 74 unused wires.
<suppressed ~1 debug messages>

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

26.16. Rerunning OPT passes. (Maybe there is more to do..)

26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

26.20. Executing OPT_DFF pass (perform DFF optimizations).

26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

26.23. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$200_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$201_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell laplacian.$add$/openlane/designs/laplacian/src/laplacian.v:497$110 ($add).
Removed top 26 bits (of 32) from port B of cell laplacian.$ge$/openlane/designs/laplacian/src/laplacian.v:498$111 ($ge).
Removed top 23 bits (of 32) from port B of cell laplacian.$le$/openlane/designs/laplacian/src/laplacian.v:498$112 ($le).
Removed top 30 bits (of 32) from port B of cell laplacian.$add$/openlane/designs/laplacian/src/laplacian.v:500$114 ($add).
Removed top 30 bits (of 32) from port B of cell laplacian.$eq$/openlane/designs/laplacian/src/laplacian.v:504$115 ($eq).
Removed top 30 bits (of 32) from port B of cell laplacian.$add$/openlane/designs/laplacian/src/laplacian.v:510$122 ($add).
Removed top 26 bits (of 32) from port B of cell laplacian.$lt$/openlane/designs/laplacian/src/laplacian.v:512$123 ($lt).
Removed top 30 bits (of 32) from port B of cell laplacian.$add$/openlane/designs/laplacian/src/laplacian.v:515$129 ($add).
Removed top 26 bits (of 32) from port B of cell laplacian.$eq$/openlane/designs/laplacian/src/laplacian.v:516$130 ($eq).
Removed top 30 bits (of 32) from port B of cell laplacian.$ge$/openlane/designs/laplacian/src/laplacian.v:522$134 ($ge).
Removed top 22 bits (of 32) from port B of cell laplacian.$ge$/openlane/designs/laplacian/src/laplacian.v:525$136 ($ge).
Removed top 30 bits (of 32) from port B of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:537$142 ($sub).
Removed top 27 bits (of 32) from port Y of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:537$142 ($sub).
Removed top 27 bits (of 32) from port A of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:537$142 ($sub).
Removed top 29 bits (of 32) from port B of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:538$146 ($sub).
Removed top 27 bits (of 32) from port Y of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:538$146 ($sub).
Removed top 27 bits (of 32) from port A of cell laplacian.$sub$/openlane/designs/laplacian/src/laplacian.v:538$146 ($sub).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$202_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$203_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$205_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$206_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$207_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$208_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$209_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$210_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$211_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$212_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$213_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell laplacian.$procmux$214_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$220_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$221_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$222_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$223_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$224_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$225_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$226_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$227_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$228_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$229_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$230_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$231_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$232_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$233_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell laplacian.$procmux$234_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$260_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$261_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$262_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$263_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$264_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$265_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$266_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$267_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$268_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$269_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$270_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$271_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$272_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$273_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell laplacian.$procmux$274_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$679_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$704_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$732_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$763_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$797_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$834_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$874_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell laplacian.$procmux$917_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$963_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$1012_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$1064_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell laplacian.$auto$opt_dff.cc:195:make_patterns_logic$1738 ($ne).
Removed top 2 bits (of 5) from port B of cell laplacian.$procmux$1119_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$1177_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell laplacian.$procmux$1238_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell laplacian.$procmux$1302_CMP0 ($eq).
Removed top 1 bits (of 11) from port Y of cell laplacian.$flatten\mat_op.\mux1.$or$/openlane/designs/laplacian/src/laplacian.v:25$166 ($or).
Removed top 1 bits (of 11) from port A of cell laplacian.$flatten\mat_op.\mux1.$or$/openlane/designs/laplacian/src/laplacian.v:25$166 ($or).
Removed top 1 bits (of 11) from port B of cell laplacian.$flatten\mat_op.\mux1.$or$/openlane/designs/laplacian/src/laplacian.v:25$166 ($or).
Removed top 1 bits (of 11) from port A of cell laplacian.$flatten\mat_op.\two_comp1.$not$/openlane/designs/laplacian/src/laplacian.v:458$167 ($not).
Removed top 1 bits (of 11) from port Y of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$163 ($and).
Removed top 1 bits (of 11) from port A of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$163 ($and).
Removed top 1 bits (of 11) from port B of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$163 ($and).
Removed top 1 bits (of 11) from port Y of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$165 ($and).
Removed top 1 bits (of 11) from port A of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$165 ($and).
Removed top 1 bits (of 11) from port B of cell laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$165 ($and).
Removed cell laplacian.$flatten\mat_op.\two_comp2.\add1.\n1.$xor$/openlane/designs/laplacian/src/laplacian.v:52$190 ($xor).
Removed top 1 bits (of 11) from port Y of cell laplacian.$flatten\mat_op.\two_comp2.$not$/openlane/designs/laplacian/src/laplacian.v:458$167 ($not).
Removed top 1 bits (of 11) from port A of cell laplacian.$flatten\mat_op.\two_comp2.$not$/openlane/designs/laplacian/src/laplacian.v:458$167 ($not).
Removed top 1 bits (of 11) from wire laplacian.$flatten\mat_op.\mux1.$and$/openlane/designs/laplacian/src/laplacian.v:25$163_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 4 unused cells and 12 unused wires.
<suppressed ~14 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module laplacian:
  creating $macc model for $add$/openlane/designs/laplacian/src/laplacian.v:497$110 ($add).
  creating $macc model for $add$/openlane/designs/laplacian/src/laplacian.v:500$114 ($add).
  creating $macc model for $add$/openlane/designs/laplacian/src/laplacian.v:510$122 ($add).
  creating $macc model for $add$/openlane/designs/laplacian/src/laplacian.v:515$129 ($add).
  creating $macc model for $sub$/openlane/designs/laplacian/src/laplacian.v:537$142 ($sub).
  creating $macc model for $sub$/openlane/designs/laplacian/src/laplacian.v:538$146 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/laplacian/src/laplacian.v:538$146.
  creating $alu model for $macc $sub$/openlane/designs/laplacian/src/laplacian.v:537$142.
  creating $alu model for $macc $add$/openlane/designs/laplacian/src/laplacian.v:515$129.
  creating $alu model for $macc $add$/openlane/designs/laplacian/src/laplacian.v:510$122.
  creating $alu model for $macc $add$/openlane/designs/laplacian/src/laplacian.v:500$114.
  creating $alu model for $macc $add$/openlane/designs/laplacian/src/laplacian.v:497$110.
  creating $alu model for $ge$/openlane/designs/laplacian/src/laplacian.v:498$111 ($ge): new $alu
  creating $alu model for $ge$/openlane/designs/laplacian/src/laplacian.v:522$134 ($ge): new $alu
  creating $alu model for $ge$/openlane/designs/laplacian/src/laplacian.v:525$136 ($ge): new $alu
  creating $alu model for $le$/openlane/designs/laplacian/src/laplacian.v:498$112 ($le): new $alu
  creating $alu model for $lt$/openlane/designs/laplacian/src/laplacian.v:512$123 ($lt): new $alu
  creating $alu model for $eq$/openlane/designs/laplacian/src/laplacian.v:516$130 ($eq): merged with $lt$/openlane/designs/laplacian/src/laplacian.v:512$123.
  creating $alu cell for $lt$/openlane/designs/laplacian/src/laplacian.v:512$123, $eq$/openlane/designs/laplacian/src/laplacian.v:516$130: $auto$alumacc.cc:485:replace_alu$1765
  creating $alu cell for $le$/openlane/designs/laplacian/src/laplacian.v:498$112: $auto$alumacc.cc:485:replace_alu$1778
  creating $alu cell for $ge$/openlane/designs/laplacian/src/laplacian.v:525$136: $auto$alumacc.cc:485:replace_alu$1793
  creating $alu cell for $ge$/openlane/designs/laplacian/src/laplacian.v:498$111: $auto$alumacc.cc:485:replace_alu$1804
  creating $alu cell for $add$/openlane/designs/laplacian/src/laplacian.v:497$110: $auto$alumacc.cc:485:replace_alu$1815
  creating $alu cell for $ge$/openlane/designs/laplacian/src/laplacian.v:522$134: $auto$alumacc.cc:485:replace_alu$1818
  creating $alu cell for $add$/openlane/designs/laplacian/src/laplacian.v:500$114: $auto$alumacc.cc:485:replace_alu$1829
  creating $alu cell for $add$/openlane/designs/laplacian/src/laplacian.v:510$122: $auto$alumacc.cc:485:replace_alu$1832
  creating $alu cell for $add$/openlane/designs/laplacian/src/laplacian.v:515$129: $auto$alumacc.cc:485:replace_alu$1835
  creating $alu cell for $sub$/openlane/designs/laplacian/src/laplacian.v:537$142: $auto$alumacc.cc:485:replace_alu$1838
  creating $alu cell for $sub$/openlane/designs/laplacian/src/laplacian.v:538$146: $auto$alumacc.cc:485:replace_alu$1841
  created 11 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~20 debug messages>

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~117 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1752 ($dffe) from module laplacian (D = $procmux$1457_Y, Q = \valid_out, rval = 1'0).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 19 unused cells and 110 unused wires.
<suppressed ~42 debug messages>

35.5. Rerunning OPT passes. (Removed registers in this run.)

35.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

35.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

35.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$1729 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[0]).
Adding EN signal on $auto$ff.cc:266:slice$1724 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[1]).
Adding EN signal on $auto$ff.cc:266:slice$1719 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[2]).
Adding EN signal on $auto$ff.cc:266:slice$1714 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[3]).
Adding EN signal on $auto$ff.cc:266:slice$1709 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[4]).
Adding EN signal on $auto$ff.cc:266:slice$1704 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[5]).
Adding EN signal on $auto$ff.cc:266:slice$1699 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[6]).
Adding EN signal on $auto$ff.cc:266:slice$1694 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[7]).
Adding EN signal on $auto$ff.cc:266:slice$1689 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[8]).
Adding EN signal on $auto$ff.cc:266:slice$1684 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[9]).
Adding EN signal on $auto$ff.cc:266:slice$1679 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[10]).
Adding EN signal on $auto$ff.cc:266:slice$1674 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[11]).
Adding EN signal on $auto$ff.cc:266:slice$1669 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[12]).
Adding EN signal on $auto$ff.cc:266:slice$1664 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[13]).
Adding EN signal on $auto$ff.cc:266:slice$1659 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[14]).
Adding EN signal on $auto$ff.cc:266:slice$1654 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[15]).
Adding EN signal on $auto$ff.cc:266:slice$1649 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[16]).
Adding EN signal on $auto$ff.cc:266:slice$1644 ($adffe) from module laplacian (D = \pixel_in, Q = \first_row[17]).

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 18 unused cells and 18 unused wires.
<suppressed ~19 debug messages>

35.10. Rerunning OPT passes. (Removed registers in this run.)

35.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

35.13. Executing OPT_DFF pass (perform DFF optimizations).

35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

35.15. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1926: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$638_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1920: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$679_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1917: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$704_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1914: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$732_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1911: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$763_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1908: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$797_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1905: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$834_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1902: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$874_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1899: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$917_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1896: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$963_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1893: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1012_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1890: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1064_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1887: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1119_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1884: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1177_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1881: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1238_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1878: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1302_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1875: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$1369_CMP \valid_in }
    New input vector for $reduce_and cell $auto$opt_dff.cc:220:make_patterns_logic$1923: { $auto$opt_dff.cc:194:make_patterns_logic$1645 $procmux$657_CMP \valid_in }
  Optimizing cells in module \laplacian.
Performed a total of 18 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

37.18. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$1eb520d59b37a0bb9a5ee26017861a157b539341\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$06a9a25e193457b564e50ab7b7ad40e176246e9c\_90_alu for cells of type $alu.
Using template $paramod$6412f7f13655de512a17af2c71a87b50b4a57324\_90_alu for cells of type $alu.
Using template $paramod$a77d4b6fbb68fb20c1bf15b8d79b6db75c48b7c2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$d962484f5f83e7cf93ec14aa287647fe30a8e420\_90_alu for cells of type $alu.
Using template $paramod$8444c060fe271ac066e795d6958454547b34628c\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$19cce28cad134d9b090c6debf037b7ee27541681\_90_alu for cells of type $alu.
Using template $paramod$26bc1555e7e0f98bd36dce43959f94aabea489fb\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~2861 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.
<suppressed ~2079 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~1785 debug messages>
Removed a total of 595 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 434 unused cells and 1819 unused wires.
<suppressed ~435 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\laplacian' to `<abc-temp-dir>/input.blif'..
Extracted 2767 gates and 3304 wires to a netlist network with 535 inputs and 132 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       89
ABC RESULTS:               NOR cells:       43
ABC RESULTS:              XNOR cells:       48
ABC RESULTS:             ORNOT cells:       86
ABC RESULTS:               MUX cells:       82
ABC RESULTS:                OR cells:      834
ABC RESULTS:               AND cells:       53
ABC RESULTS:              NAND cells:       77
ABC RESULTS:            ANDNOT cells:     1107
ABC RESULTS:               XOR cells:      146
ABC RESULTS:        internal signals:     2637
ABC RESULTS:           input signals:      535
ABC RESULTS:          output signals:      132
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 1860 unused wires.
<suppressed ~585 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \laplacian

42.2. Analyzing design hierarchy..
Top module:  \laplacian
Removed 0 unused modules.

43. Printing statistics.

=== laplacian ===

   Number of wires:               3647
   Number of wire bits:           4916
   Number of public wires:        1155
   Number of public wire bits:    2300
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3094
     $_ANDNOT_                    1107
     $_AND_                         53
     $_DFFE_PP0P_                  530
     $_DFFE_PP1P_                    3
     $_MUX_                         82
     $_NAND_                        76
     $_NOR_                         43
     $_NOT_                         89
     $_ORNOT_                       84
     $_OR_                         832
     $_SDFFCE_PN0P_                  1
     $_XNOR_                        48
     $_XOR_                        146

44. Executing CHECK pass (checking for obvious problems).
Checking module laplacian...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/laplacian/runs/full_guide/tmp/synthesis/post_techmap.dot'.
Dumping module laplacian to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \laplacian..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \laplacian.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\laplacian'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module laplacian.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 1091 unused wires.
<suppressed ~1091 debug messages>

49. Printing statistics.

=== laplacian ===

   Number of wires:               2556
   Number of wire bits:           3196
   Number of public wires:          64
   Number of public wire bits:     580
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3094
     $_ANDNOT_                    1107
     $_AND_                         53
     $_DFFE_PP0P_                  530
     $_DFFE_PP1P_                    3
     $_MUX_                         82
     $_NAND_                        76
     $_NOR_                         43
     $_NOT_                         89
     $_ORNOT_                       84
     $_OR_                         832
     $_SDFFCE_PN0P_                  1
     $_XNOR_                        48
     $_XOR_                        146

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/running_courses/EE671/EE671_40/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/running_courses/EE671/EE671_40/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/running_courses/EE671/EE671_40/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/running_courses/EE671/EE671_40/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\laplacian':
  mapped 530 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 3 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
  mapped 1 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== laplacian ===

   Number of wires:               3624
   Number of wire bits:           4264
   Number of public wires:          64
   Number of public wire bits:     580
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4162
     $_ANDNOT_                    1107
     $_AND_                         53
     $_MUX_                        617
     $_NAND_                        76
     $_NOR_                         43
     $_NOT_                        622
     $_ORNOT_                       84
     $_OR_                         832
     $_XNOR_                        48
     $_XOR_                        146
     sky130_fd_sc_hd__dfrtp_2      530
     sky130_fd_sc_hd__dfstp_2        3
     sky130_fd_sc_hd__dfxtp_2        1

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\laplacian' to `/tmp/yosys-abc-xBGWZj/input.blif'..
Extracted 3628 gates and 4173 wires to a netlist network with 544 inputs and 1075 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-xBGWZj/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-xBGWZj/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-xBGWZj/input.blif 
ABC: + read_lib -w /openlane/designs/laplacian/runs/full_guide/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/laplacian/runs/full_guide/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/laplacian/runs/full_guide/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/laplacian/runs/full_guide/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 30000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 30000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 30000 
ABC: Current delay (5972.82 ps) does not exceed the target delay (30000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 30000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   2615 ( 45.4 %)   Cap = 16.5 ff (  8.8 %)   Area =    19105.82 ( 54.5 %)   Delay =  6298.77 ps  (  6.5 %)               
ABC: Path  0 --     510 : 0    2 pi                        A =   0.00  Df =  23.9  -14.2 ps  S =  38.7 ps  Cin =  0.0 ff  Cout =   6.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2765 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 266.0 -100.9 ps  S = 282.0 ps  Cin =  2.1 ff  Cout =  23.4 ff  Cmax = 130.0 ff  G = 1062  
ABC: Path  2 --    2772 : 3    8 sky130_fd_sc_hd__and3b_2  A =  10.01  Df = 546.1 -108.3 ps  S =  91.3 ps  Cin =  1.5 ff  Cout =  12.8 ff  Cmax = 309.5 ff  G =  843  
ABC: Path  3 --    2773 : 2    1 sky130_fd_sc_hd__and2_2   A =   7.51  Df = 684.3  -60.3 ps  S =  34.8 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 303.0 ff  G =  143  
ABC: Path  4 --    2774 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 934.4 -144.4 ps  S = 295.8 ps  Cin =  2.1 ff  Cout =  24.7 ff  Cmax = 130.0 ff  G = 1107  
ABC: Path  5 --    3232 : 5    1 sky130_fd_sc_hd__a221o_2  A =  11.26  Df =1186.4  -56.1 ps  S =  46.9 ps  Cin =  2.3 ff  Cout =   1.5 ff  Cmax = 299.4 ff  G =   61  
ABC: Path  6 --    3239 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1831.0 -604.1 ps  S =  95.1 ps  Cin =  1.5 ff  Cout =   2.5 ff  Cmax = 310.4 ff  G =  153  
ABC: Path  7 --    3240 : 5    2 sky130_fd_sc_hd__o32a_2   A =  11.26  Df =2199.6 -539.0 ps  S =  79.8 ps  Cin =  2.3 ff  Cout =  12.0 ff  Cmax = 300.3 ff  G =  496  
ABC: Path  8 --    3257 : 5    3 sky130_fd_sc_hd__a32o_2   A =  11.26  Df =2694.3 -574.2 ps  S = 105.6 ps  Cin =  2.3 ff  Cout =  14.3 ff  Cmax = 264.6 ff  G =  585  
ABC: Path  9 --    3283 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =3003.9 -735.2 ps  S =  59.2 ps  Cin =  2.4 ff  Cout =   7.1 ff  Cmax = 325.0 ff  G =  288  
ABC: Path 10 --    3286 : 4    2 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =3274.9 -821.7 ps  S =  83.8 ps  Cin =  2.4 ff  Cout =  11.5 ff  Cmax = 271.9 ff  G =  466  
ABC: Path 11 --    3288 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =3510.1 -900.3 ps  S =  70.1 ps  Cin =  2.4 ff  Cout =  11.5 ff  Cmax = 309.5 ff  G =  469  
ABC: Path 12 --    3313 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =3727.4 -961.0 ps  S =  80.7 ps  Cin =  2.4 ff  Cout =  13.8 ff  Cmax = 309.5 ff  G =  557  
ABC: Path 13 --    3494 : 2    3 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =3948.0-1011.9 ps  S = 211.4 ps  Cin =  8.5 ff  Cout =  12.4 ff  Cmax = 121.8 ff  G =  140  
ABC: Path 14 --    3545 : 2    1 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =4192.0 -973.0 ps  S = 157.8 ps  Cin =  8.6 ff  Cout =   8.4 ff  Cmax = 130.0 ff  G =   96  
ABC: Path 15 --    3546 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =4367.2  -56.1 ps  S = 138.4 ps  Cin =  8.5 ff  Cout =   6.1 ff  Cmax = 121.8 ff  G =   69  
ABC: Path 16 --    3581 : 2    2 sky130_fd_sc_hd__and2_2   A =   7.51  Df =4547.4  -61.1 ps  S =  58.6 ps  Cin =  1.5 ff  Cout =   7.3 ff  Cmax = 303.0 ff  G =  465  
ABC: Path 17 --    3583 : 4    3 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =4879.8 -251.7 ps  S =  70.7 ps  Cin =  2.4 ff  Cout =  11.5 ff  Cmax = 325.0 ff  G =  471  
ABC: Path 18 --    3590 : 5    1 sky130_fd_sc_hd__a311oi_2 A =  15.01  Df =5107.8 -392.8 ps  S = 178.4 ps  Cin =  4.3 ff  Cout =   2.6 ff  Cmax =  84.2 ff  G =   55  
ABC: Path 19 --    3592 : 3    7 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =5294.1 -346.8 ps  S =  90.6 ps  Cin =  2.4 ff  Cout =  14.9 ff  Cmax = 294.8 ff  G =  608  
ABC: Path 20 --    3620 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =5659.0 -481.5 ps  S = 438.4 ps  Cin =  2.1 ff  Cout =  37.0 ff  Cmax = 130.0 ff  G = 1698  
ABC: Path 21 --    3621 : 3    1 sky130_fd_sc_hd__a21boi_2 A =  11.26  Df =5752.6 -395.8 ps  S =  83.9 ps  Cin =  3.6 ff  Cout =   2.6 ff  Cmax = 129.1 ff  G =   66  
ABC: Path 22 --    3623 : 5    1 sky130_fd_sc_hd__o41a_2   A =  12.51  Df =6298.8 -343.3 ps  S = 179.3 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 305.8 ff  G = 1420  
ABC: Start-point = pi509 (\col_operation [0]).  End-point = po534 (\pixel_out [1]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  544/ 1075  lat =    0  nd =  2615  edge =   5799  area =19102.73  delay =25.00  lev = 25
ABC: + write_blif /tmp/yosys-abc-xBGWZj/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:      157
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      139
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      103
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       37
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       70
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      434
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      646
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      541
ABC RESULTS:        internal signals:     2554
ABC RESULTS:           input signals:      544
ABC RESULTS:          output signals:     1075
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \laplacian..
Removed 0 unused cells and 4263 unused wires.
<suppressed ~28 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module laplacian...
Found and reported 0 problems.

63. Printing statistics.

=== laplacian ===

   Number of wires:               3146
   Number of wire bits:           3160
   Number of public wires:         539
   Number of public wire bits:     553
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3149
     sky130_fd_sc_hd__a2111o_2      30
     sky130_fd_sc_hd__a211o_2       19
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        14
     sky130_fd_sc_hd__a21oi_2       24
     sky130_fd_sc_hd__a221o_2      139
     sky130_fd_sc_hd__a22o_2       157
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2        19
     sky130_fd_sc_hd__a32o_2         4
     sky130_fd_sc_hd__and2_2        53
     sky130_fd_sc_hd__and2b_2       33
     sky130_fd_sc_hd__and3_2        70
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__and4_2        12
     sky130_fd_sc_hd__buf_1        646
     sky130_fd_sc_hd__dfrtp_2      530
     sky130_fd_sc_hd__dfstp_2        3
     sky130_fd_sc_hd__dfxtp_2        1
     sky130_fd_sc_hd__inv_2        541
     sky130_fd_sc_hd__mux2_2       434
     sky130_fd_sc_hd__nand2_2       30
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2        3
     sky130_fd_sc_hd__nor2_2       103
     sky130_fd_sc_hd__nor3_2        14
     sky130_fd_sc_hd__nor3b_2        3
     sky130_fd_sc_hd__nor4_2         5
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         7
     sky130_fd_sc_hd__o21ai_2        7
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__o22a_2        13
     sky130_fd_sc_hd__o22ai_2        8
     sky130_fd_sc_hd__o31a_2         2
     sky130_fd_sc_hd__o32a_2         8
     sky130_fd_sc_hd__o41a_2         7
     sky130_fd_sc_hd__or2_2         19
     sky130_fd_sc_hd__or2b_2         8
     sky130_fd_sc_hd__or3_2         20
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2         42
     sky130_fd_sc_hd__or4b_2         3
     sky130_fd_sc_hd__xnor2_2       37
     sky130_fd_sc_hd__xor2_2        58

   Chip area for module '\laplacian': 33131.776000

64. Executing Verilog backend.
Dumping module `\laplacian'.

65. Executing JSON backend.

Warnings: 3 unique messages, 6 total
End of script. Logfile hash: e4d55d3ea1, CPU: user 1.71s system 0.04s, MEM: 44.78 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 70% 2x abc (3 sec), 6% 28x opt_clean (0 sec), ...
